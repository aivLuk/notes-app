{"version":3,"sources":["components/Notes/Notes.module.css","components/Input/Input.module.css","App.module.css","components/Input/Input.js","components/Notes/Notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","props","className","styles","InputContainer","type","TextArea","style","border","error","placeholder","onChange","changed","onClick","clicked","InputBtn","Notes","noteList","notes","map","el","index","key","SingleNote","Note","note","Date","date","Done","NotesContainer","App","state","currentNote","addNoteHandler","length","cur","notesArr","currDate","toLocaleString","push","setState","changeNoteHandler","event","target","value","NoteDoneHandler","indx","newNotes","splice","this","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,WAAa,0BAA0B,eAAiB,8BAA8B,KAAO,oBAAoB,KAAO,oBAAoB,KAAO,oBAAoB,KAAO,oBAAoB,SAAW,0B,gBCA9QD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,SAAW,wBAAwB,SAAW,0B,sBCA/GD,EAAOC,QAAU,CAAC,IAAM,mB,qNCiBTC,EAfD,SAACC,GAAD,OACV,yBAAKC,UAAWC,IAAOC,gBACnB,8BACIC,KAAK,OACLH,UAAWC,IAAOG,SAClBC,MAAO,CAAEC,OAAQP,EAAMQ,MAAQ,gBAAkB,kBACjDC,YAAY,qBACZC,SAAUV,EAAMW,UACpB,4BAAQC,QAASZ,EAAMa,QAASZ,UAAWC,IAAOY,UAAlD,c,gBCQOC,EAhBD,SAACf,GACX,IAAMgB,EAAWhB,EAAMiB,MAAMC,KAAI,SAACC,EAAIC,GAClC,OAAO,yBAAKC,IAAKD,EAAOnB,UAAWC,IAAOoB,YACtC,uBAAGrB,UAAWC,IAAOqB,MAAOJ,EAAGK,MAC/B,0BAAMvB,UAAWC,IAAOuB,MAAON,EAAGO,MAClC,4BACIzB,UAAWC,IAAOyB,KAClBf,QAAS,kBAAMZ,EAAMa,QAAQO,KAFjC,YAMR,OAAO,yBAAKnB,UAAWC,IAAO0B,gBACzBZ,ICqCMa,E,2MA9CbC,MAAQ,CACNC,YAAa,GACbd,MAAO,GACPT,OAAO,G,EAGTwB,eAAiB,WACf,GAAI,EAAKF,MAAMC,YAAYE,OAAS,EAAG,CACrC,IAAMC,EAAM,EAAKJ,MAAMC,YACjBI,EAAQ,YAAO,EAAKL,MAAMb,OAE1BmB,GADO,IAAIX,MACKY,iBACtBF,EAASG,KAAK,CAAEd,KAAMU,EAAKR,KAAMU,IACjC,EAAKG,SAAS,CAAEtB,MAAOkB,EAAU3B,OAAO,SAExC,EAAK+B,SAAS,CAAE/B,OAAO,K,EAI3BgC,kBAAoB,SAACC,GACnB,IAAMjB,EAAOiB,EAAMC,OAAOC,MAC1B,EAAKJ,SAAS,CAAER,YAAaP,K,EAG/BoB,gBAAkB,SAACC,GACjB,IAAMC,EAAQ,YAAO,EAAKhB,MAAMb,OAChC6B,EAASC,OAAOF,EAAM,GACtB,EAAKN,SAAS,CAAEtB,MAAO6B,K,wEAGf,IAAD,OAEP,OACE,yBAAK7C,UAAWC,IAAO2B,KACrB,kBAAC,EAAD,CACErB,MAAOwC,KAAKlB,MAAMtB,MAClBK,QAASmC,KAAKhB,eACdrB,QAAS,SAACsC,GAAD,OAAO,EAAKT,kBAAkBS,MACzC,kBAAC,EAAD,CACEhC,MAAO+B,KAAKlB,MAAMb,MAClBJ,QAASmC,KAAKJ,uB,GAzCNM,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACL2D,QAAQ3D,MAAMA,EAAM4D,c","file":"static/js/main.10fdd761.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NotesContainer\":\"Notes_NotesContainer__4ZuSd\",\"SingleNote\":\"Notes_SingleNote__f8QrY\",\"noteTransition\":\"Notes_noteTransition__3mkOI\",\"Note\":\"Notes_Note__3Q-dY\",\"Done\":\"Notes_Done__3uoXO\",\"Date\":\"Notes_Date__1nl4E\",\"Gone\":\"Notes_Gone__SOAWH\",\"noteGone\":\"Notes_noteGone__2EFuH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputContainer\":\"Input_InputContainer__2vSBe\",\"TextArea\":\"Input_TextArea__38jc5\",\"InputBtn\":\"Input_InputBtn__ra9Be\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__17aBM\"};","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nconst Input = (props) => (\r\n    <div className={styles.InputContainer}>\r\n        <textarea\r\n            type='text'\r\n            className={styles.TextArea}\r\n            style={{ border: props.error ? '1px solid red' : '1px solid #ccc' }}\r\n            placeholder='Add a note here...'\r\n            onChange={props.changed} />\r\n        <button onClick={props.clicked} className={styles.InputBtn}>Add note</button>\r\n    </div>\r\n)\r\n\r\n\r\n\r\n\r\nexport default Input;","import React from 'react';\r\nimport styles from './Notes.module.css';\r\n\r\nconst Notes = (props) => {\r\n    const noteList = props.notes.map((el, index) => {\r\n        return <div key={index} className={styles.SingleNote}>\r\n            <p className={styles.Note}>{el.note}</p>\r\n            <span className={styles.Date}>{el.date}</span>\r\n            <button\r\n                className={styles.Done}\r\n                onClick={() => props.clicked(index)}>Done</button>\r\n        </div >\r\n    })\r\n\r\n    return <div className={styles.NotesContainer}>\r\n        {noteList}\r\n    </div>\r\n}\r\n\r\nexport default Notes;","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport Input from './components/Input/Input';\nimport Notes from './components/Notes/Notes'\n\nclass App extends Component {\n  state = {\n    currentNote: '',\n    notes: [],\n    error: false\n  }\n\n  addNoteHandler = () => {\n    if (this.state.currentNote.length > 0) {\n      const cur = this.state.currentNote;\n      const notesArr = [...this.state.notes];\n      const date = new Date();\n      const currDate = date.toLocaleString();\n      notesArr.push({ note: cur, date: currDate });\n      this.setState({ notes: notesArr, error: false })\n    } else {\n      this.setState({ error: true })\n    }\n  }\n\n  changeNoteHandler = (event) => {\n    const note = event.target.value;\n    this.setState({ currentNote: note })\n  }\n\n  NoteDoneHandler = (indx) => {\n    const newNotes = [...this.state.notes];\n    newNotes.splice(indx, 1);\n    this.setState({ notes: newNotes });\n  }\n\n  render() {\n\n    return (\n      <div className={styles.App} >\n        <Input\n          error={this.state.error}\n          clicked={this.addNoteHandler}\n          changed={(e) => this.changeNoteHandler(e)} />\n        <Notes\n          notes={this.state.notes}\n          clicked={this.NoteDoneHandler} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}